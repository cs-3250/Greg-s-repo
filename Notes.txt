''''''-- Greg Dews' Notes--



6/3/2019
        5 - 2week sprints
            everyother day present 1 submit from each team
    Post everything on repo
    one notes, file with each name
    1st test - 5 dys and head first design patterns

    presentation?

    pulled from child's report card, extrapolated into slides
    Important stuff
        act confident, secure
        respect rights and prop. of others
        works cooperatively with others
        courteous; respects authority, polite
        practice self-control
        accepts responsibility for behavior
        resolves conflict appropriately
        exhibits positive attitude toward learning
            "if it was easy, we wouldn't do it. If it was repetitive, we wouldn't be paid well to do it."
        participate in class discussions
        engaged listener
        follows written and oral directions
        completes work in a timely manner - this is huge
            emphasis on procrastination - this career needs 'front loading'
        works independently
        responsible for belongings and property
        asks for help when needed
        produces neat, accurate, quality work
            'spelling mistakes? is it pep8 compatable'
        positive work ethic
        completes timely, accurate homework
        uses good organizational skills
        demonstrates technology skills 
        uses library media to enhance

    hundreds of tests are needed, documentation
    in general, in field, 20% of time is spent coding
    learning multiple languages is crucial
    "never write searches, trees, linked lists, again"
    "steal liberally, but cite liberally"
        in comment add link and description of where each piece was from

    Recommendations from former students:
        Weekends don't help, manage your time, life always intrudes
        prove what you did
        over communicate, tag each sprint at the end - talk about this by end
        you are too optimistic
        budget for research, platform shifts, and for process, estimating points is very difficult
        physical sprint planning meetings are much more useful
        stay focused on current sprints
        always build and manually test the app, even if it seems changes in PR(pull request) are minor

    SME's - subject matter experts
        interact with customer and bring info to team

    Manager - hiring firing, etc.
    Scrum Master - 
    Product Owner

    **Require two reviewers to complete a pull request**
    XP - extreme programming
        2 people, one keyboard and mouse
        more knowledgable person driving
        less knowl. does typing

    Brookes Law - adding more people to a late project makes it later.
        communication lines add an N^2 problem

    Comments are a bad idea, you should be able to understand your code without explanation
        refactor the code, make it readable
        **Method decomposition**
        if your method has more than 7 functional parts, its too hefty

    user stories from product backlog,   
    Sprint backlog should have pieces that can be completed in one day
    definition of done, into doing

    first sprint is done this thursday
    pep8 - spaces, not tabs, 2 empty spaces between methods, etc.


6/5/2019
    Personal note:
        need to talk with group about github functionality (pull requests)

    Slides/presentation
        open source software - influence in areas of interest
        
        "The Cathedral and the Bazaar" - closed source software is a cathedral, open is the Bazaar
        
        messaging apps - wats app (africa/india), we chat (china)
            facebook bought watsApp
        
        software systems are among the most complex ever created by humans
        
        SLOC - source lines of code
        
        bugs in code
            undergrad - every 10 lines of code
            professional - every 100 lines of code
            master (in the stride after professional) - every 1000 lines
        
        "Use other people's stuff as much as possible"
            less code writing means less bugs
        
        The importance of unit testing - Therac machine issues

6/6/2019
    continuing slides
        
        DIA - 100 PC's 5k electric motors, scanners etc.
            automated luggage never worked
            16 months past it's hard deadline
            cost $560 million over budget
            Destroyed baggage
            Was not scalable to size of DIA
        
        Chaos 1995
            $250 billion each year on IT application development ~175k projects
            2.3M for large company
            31.1% of projects canceled before completion costing $81 billion
                pay additional $59 billion for completed
            16.2% for software projects that are completed on-time and on-budget
                larger businesses ~9% of projects
            completed projects have 42% of originally proposed features
            smaller companies do better - 78.4% projects get deployed
            This study has been done many more times, only change is inflation of dollar amounts
        
        Brooks, Fred P.(1986) "No Silver Bullet -- essence and accident in software engineering"
            "there is no single development in either technology or management technique, which by itself promises even one order of magnitude improvement within a decade of productivity, in reliability, in simplicity"
            Two types of complexity
                accidental complexity and essential complexity
                problems are hard, don't make more complexity in the development
            Ten fold difference between an ordinary designer and a great one
        
        No correlation between what makes a person a good programmer
        
        Engineering?
            Software engineering is the study and application of engineering to the design, development, and maintenance of software
        
        Margaret Hamilton
            Extensive testing

        Terminology *
            Program Requirements (user stories)
                statements that define and quantify what the program needs to do
                not used the same way as "elsewhere" - these are negotiable
            Functional Requirements
                What a program needs to do (yes/no)
            Non-Functional Requirements (could still be needed for FR)
                manner in which the functional requirements need to be achieved
                performance, usability, maintainability
                tend to be on a scale rather than yes/no
            Design Constraints
                Platform, language, Database, webapp, GUI, etc.
6/7/2019
    Checked slack, moodle, and group drive locations. No sign of customer story information.
    Tried messaging Lauren Vagts (Customer), no response as of 9am. Probably still on vacation in the wilderness.
    I plan to update product backlog with David (Scrum Master) and Lauren
    While I wait, I will play some Zork and get myself caught up from last sprint.
